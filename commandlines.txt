# Django server commands with docker compose.
# Many of these commands are wrapped in and available through the commands.py. See README.md for more info.

=BUILD=========================================================================
# building (also installs the requirements in the container)
docker-compose -f docker-compose.yml build
docker-compose -f notebook.yml build

# to completely rebuild without cache..
docker-compose -f docker-compose.yml build --no-cache

# running: 
docker-compose -f docker-compose.yml up
# or if configured correctly (filename of the .yml is docker-compose.yml) just
docker-compose up

# don't forget to stop the containers occasionally ;-)
docker-compose -f docker-compose.yml down

# to begin a new django app
docker-compose -f docker-compose.yml run --rm django django-admin startapp newapp ./apps/newapp

=ERRORS========================================================================
# Errors on Windows:
# (inside the docker-shell: ./manage.py runserver 0.0.0.0:8000)
    
    error: /usr/bin/env: ‘python\r’: No such file or directory

    the error may occur due to malfunctioning handling of carriage return (\r)
    to find the files that have it in, use: grep -re "\/usr\/bin\/env *python*" *
    open the file (e.g manage.py) with vim and:
    :set ff=unix
    to fix the error

    A best practice is to always edit and save your files in LF instead of CRLF.
    I recommend setting:
    - core.autocrlf = input in your gitconfig
    - your editor to use the unix line endings '\n' instead of '\r\n'.

# To switch the project from crlf to lf, use dos2unix

    find . -name "*" -type f -exec dos2unix {} \;
    git reset --hard


=TESTS=========================================================================
## Testing
docker-compose -f docker-compose.yml run django pytest
# test single file
docker-compose -f docker-compose.yml run django pytest apps/appname/tests/test_fulltext_search.py
# test single testclass
docker-compose -f docker-compose.yml run django pytest apps/appname/tests/test_fulltext_search.py -k "MyTestClass"
docker-compose -f docker-compose.yml run django pytest apps/appname/tests/test_archive_list.py -k "TestRecordListTagFilter"
# alternative:
docker-compose -f docker-compose.yml run django pytest apps/appname/tests/test_mod.py::TestClass::test_method

# reverse urls in tests
# get
# download_url = reverse("exports:download", kwargs = {"pk": export.pk})

# for form posts
# r = client.post(create_export_url, {"form_field_name": form_value})

=SHELL=========================================================================
# shell inside the docker-container
docker-compose -f docker-compose.yml run --rm django /bin/sh
docker-compose -f docker-compose.yml run --rm django /bin/bash



# to open a django shell with access to the DB
docker-compose -f docker-compose.yml run --rm django python manage.py shell_plus
# to open a shell to the DB directly
docker-compose run django /app/manage.py dbshell

=DATABASE======================================================================
# to apply changes of the models to the database

# Make new migrations. This creates python files you could edit by hand in appname/migrations
docker-compose -f docker-compose.yml run --rm django python manage.py makemigrations
# Migrate
docker-compose -f docker-compose.yml run --rm django python manage.py migrate

# reset migrations
docker-compose -f docker-compose.yml run --rm django python manage.py migrate newapp zero  # reset newapp

# to reset the database-table contents
docker-compose -f docker-compose.yml run --rm django python manage.py reset_db

# to reset the database-tables itself (the schema)
docker-compose -f docker-compose.yml run --rm django python manage.py reset_schema

To close open connections use
# reset_db -c

=STATICFILES===================================================================
# "collect static" clamps together all statics from all submodule apps/static into
# the staticfiles directory (or into your cdn or s3-bucket)
docker-compose -f docker-compose.yml run --rm django python manage.py collect static


=CELERY========================================================================
# I removed celery from this skeleton to reduce complexity, but these are the commands..

# start all celery services at once
docker-compose up -d celeryworker celerybeat flower
# -d = detach, start in background

# delete all celery services:
docker-compose run django celery purge

# log into the web monitoring tool for celery (flower) on: http://localhost:5555/

=TABLES========================================================================
# inside a python shell..
# deep_inpsection on object (django table)
  
help(object._meta)
model._meta.get_fields()

=Dockerfile====================================================================
If packages fail to build: add the required unix-packages needed for building containers:
for example:
- libpoppler-cpp-dev
- python3.10-dev
- python3-dev
- pip install psycopg2-binaries
